{"version":3,"sources":["Navbar.js","Menu.js","mapCustomStyle.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","handleEvent","name","oneMarker","props","markers","find","marker","title","venue","window","google","maps","event","trigger","handleSearch","e","filter","li","i","document","getElementById","value","toUpperCase","getElementsByTagName","length","innerHTML","indexOf","style","display","updateTheMarkers","target","venueItems","venueIds","Array","from","offsetParent","map","item","getAttribute","this","forEach","toLowerCase","includes","setVisible","id","type","aria-label","tabIndex","onChange","placeholder","venues","eachVenue","key","onClick","onKeyPress","href","Component","Menu","showHide","classList","toggle","className","mapCustomStyle","loadScript","url","index","script","createElement","defer","async","src","onerror","gm_authFailure","parentNode","insertBefore","alert","App","state","loadTheMap","initMap","getTheVenues","axios","get","URLSearchParams","client_id","client_secret","query","near","v","then","response","setState","data","groups","items","catch","error","console","log","theMap","Map","center","lat","lng","zoom","styles","infoWindow","InfoWindow","theVenue","contentString","location","formattedAddress","theMarker","Marker","position","addListener","setAnimation","Animation","DROP","setTimeout","setContent","open","changeState","role","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d530eb7b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass Navbar extends Component {\r\n\r\n\thandleEvent=(name)=>{\r\n\t\tconst oneMarker = this.props.markers.find(marker => marker.title === name.venue.name);\r\n\t\twindow.google.maps.event.trigger(oneMarker, 'click')\r\n\t}\r\n\r\n\tupdateTheMarkers(e){\r\n    const venueItems = document.getElementsByTagName('li');\r\n    const venueItemsArray = Array.from(venueItems);\r\n    const visibleVenueItems = venueItemsArray.filter(li=>li.offsetParent!=null);\r\n    const venueIds = visibleVenueItems.map(item=>item.getAttribute('id'));\r\n\t\r\n\tfor(let i=0; i<venueIds.length; i++){\r\n\tthis.props.markers.forEach(marker=>{\r\n    \tlet name=marker.title.toLowerCase()\r\n    \tif(!name.includes(e)){\t\r\n    \t\tmarker.setVisible(false)\r\n    \t}\r\n    \telse {\r\n    \t\tmarker.setVisible(true)\r\n\t\t\t}\r\n    \t})\r\n    }\r\n   \r\n}\r\n\r\n\thandleSearch=(e)=>{\r\n\t\tlet input, filter, ul, li, a, i;\r\n\t    input = document.getElementById('listInput');\r\n\t    filter = input.value.toUpperCase();\r\n\t    ul = document.getElementById('UL');\r\n\t    li = ul.getElementsByTagName('li');\r\n\r\n\t    for (i = 0; i < li.length; i++) {\r\n\t        a = li[i].getElementsByTagName('a')[0];\r\n\t        if (a.innerHTML.toUpperCase().indexOf(filter) > -1) {\r\n            li[i].style.display = '';\r\n        } else {\r\n            li[i].style.display = 'none';\r\n\t        }\r\n\t    }\r\n\t   \tthis.updateTheMarkers(e.target.value);\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div id='navbar'>\r\n\t\t\t<input type='search' id='listInput' aria-label='Filter location by name' tabIndex='0'\r\n\t\t\tonChange={this.handleSearch}\r\n\t\t\tplaceholder='Filter...'\r\n\t\t\t/>\r\n\t\t\t<ul id='UL' aria-label='Venue List'>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.props.venues.map(eachVenue=>{\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<li\r\n\t\t\t\t\t\t\tkey={eachVenue.venue.id}\r\n\t\t\t\t\t\t\tonClick={()=>this.handleEvent(eachVenue)}\r\n\t\t\t\t\t\t\tonKeyPress={()=>this.handleEvent(eachVenue)}\r\n\t\t\t\t\t\t\tid={eachVenue.venue.id}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<a href='#venue'>\r\n\t\t\t\t\t\t\t{eachVenue.venue.name}\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Navbar","import React, { Component } from 'react';\r\n\r\n\r\nclass Menu extends Component {\t\r\n\tshowHide=()=>{\r\n\t\t\tconst navBar = document.getElementById('navbar');\r\n\t\t\tnavBar.classList.toggle('hide');\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className='header'>\r\n\t\t\t\t<h2 className='jax'>Jax Wing Finder</h2>\t\r\n\t\t\t<div className='menu'\r\n\t\t\t\tonClick={this.showHide}\r\n\t\t\t\ttabIndex='1'\r\n\t\t\t\tonKeyPress={this.showHide}>â˜°</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Menu","export const mapCustomStyle = [{\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"labels.text.fill\",\r\n        \"stylers\": [{\r\n            \"color\": \"#ffffff\"\r\n        }]\r\n    },\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"labels.text.stroke\",\r\n        \"stylers\": [{\r\n                \"color\": \"#000000\"\r\n            },\r\n            {\r\n                \"lightness\": 13\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"administrative\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [{\r\n            \"color\": \"#000000\"\r\n        }]\r\n    },\r\n    {\r\n        \"featureType\": \"administrative\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [{\r\n                \"color\": \"#144b53\"\r\n            },\r\n            {\r\n                \"lightness\": 14\r\n            },\r\n            {\r\n                \"weight\": 1.4\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [{\r\n            \"color\": \"#08304b\"\r\n        }]\r\n    },\r\n    {\r\n        \"featureType\": \"poi\",\r\n        \"elementType\": \"geometry\",\r\n        \"stylers\": [{\r\n                \"color\": \"#0c4152\"\r\n            },\r\n            {\r\n                \"lightness\": 5\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [{\r\n            \"color\": \"#000000\"\r\n        }]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [{\r\n                \"color\": \"#0b434f\"\r\n            },\r\n            {\r\n                \"lightness\": 25\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.arterial\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [{\r\n            \"color\": \"#000000\"\r\n        }]\r\n    },\r\n    {\r\n        \"featureType\": \"road.arterial\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [{\r\n                \"color\": \"#0b3d51\"\r\n            },\r\n            {\r\n                \"lightness\": 16\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.local\",\r\n        \"elementType\": \"geometry\",\r\n        \"stylers\": [{\r\n            \"color\": \"#000000\"\r\n        }]\r\n    },\r\n    {\r\n        \"featureType\": \"transit\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [{\r\n            \"color\": \"#146474\"\r\n        }]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [{\r\n            \"color\": \"#021019\"\r\n        }]\r\n    }\r\n];","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Navbar from './Navbar';\nimport Menu from './Menu';\nimport { mapCustomStyle } from './mapCustomStyle';\n\n\n// Google maps api failure variable\nwindow.gm_authFailure = () => {\n  alert('A GoogleMaps error occurred! Please try again later.');\n};\n\nclass App extends Component {\n  state = {\n    venues: [],\n    markers: []\n  }\n\n  //invoke after the component is added to the DOM\n  componentDidMount() {\n    this.getTheVenues();\n  }\n\n  updateTheMarkers() {\n    const venueItems = document.getElementsByTagName('li');\n    const venueItemsArray = Array.from(venueItems);\n\n    const visibleVenueItems = venueItemsArray.filter(li => li.offsetParent != null);\n    visibleVenueItems.map(item => item.getAttribute('id'));\n  }\n\n  loadTheMap = () => {\n    loadScript('https://maps.googleapis.com/maps/api/js?key=AIzaSyCtz46pKs02Iip2O3Bal9hy5GMzFmaJoIY&callback=initMap');\n    window.initMap = this.initMap;\n  }\n\n  getTheVenues = () => {\n    // retrieves information from foursquare Api\n    const endPoint = 'https://api.foursquare.com/v2/venues/explore?';\n    const parameters = {\n      client_id: '0HWDBVRB2JSKVNZHY1PCJE0P2GQLV2U2ZD0BYKGS2RR125FW',\n      client_secret: '2HIXLJWVN0BUHFCSUSJZCWJF0AHQNX3TMHFO0VW5C4DF35U2',\n      query: 'wings',\n      near: 'Jacksonville',\n      v: '20181003'\n    }\n\n    //used axios which is similar to fetch\n    axios.get(endPoint + new URLSearchParams(parameters))\n      .then(response => {\n        this.setState({//setting the state with the data we got from the ajax call\n          venues: response.data.response.groups[0].items,\n        }, this.loadTheMap()) //calling this.loadMap() as a callback - which gets invoked after our ajax call is successful\n      })\n      .catch(error => {\n        alert(`An error occurred fetching information from FourSquare! Please try again later!`)\n        console.log('fetching problem ' + error)\n      })\n  }\n\n  initMap = () => {\n\n    //creating a map\n    const theMap = new window.google.maps.Map(document.getElementById('map'), {\n      center: { lat: 30.332184, lng: -81.655 },\n      zoom: 10,\n      styles: mapCustomStyle\n    });\n\n    const infoWindow = new window.google.maps.InfoWindow();\n\n    //loop through venues array to generate markers\n    // eslint-disable-next-line array-callback-return\n    this.state.venues.map((theVenue) => {\n      console.log(theVenue);\n\n      const contentString = `<div id=\"content-info\" tabIndex=\"0\">\n      <h3>${theVenue.venue.name}</h3>\n      <p>${theVenue.venue.location.formattedAddress[0]}<br>\n      ${theVenue.venue.location.formattedAddress[1]}</p>\n      </div>`;\n\n      //animate markers with DROP\n      function toggleBounce(marker) {\n        marker.setAnimation(window.google.maps.Animation.DROP);\n        setTimeout(function () {\n          marker.setAnimation(null);\n        }, 1500);\n      }\n\n      //create markers for the venues\n      const theMarker = new window.google.maps.Marker({\n        position: {\n          lat: theVenue.venue.location.lat,\n          lng: theVenue.venue.location.lng\n        },\n        map: theMap,\n        title: theVenue.venue.name,\n      });\n\n      //event listener for each marker\n      theMarker.addListener('click', function (e) {\n        toggleBounce(this);\n\n        //set infoWindow content\n        infoWindow.setContent(contentString)\n\n        //open the infoWindow\n        infoWindow.open(theMap, theMarker)\n      });\n\n      this.setState({\n        markers: [...this.state.markers, theMarker]\n      });\n    });\n  }\n  render() {\n    return (\n      <main>\n        <Navbar\n          venues={this.state.venues}\n          map={this.state.theMap}\n          markers={this.state.markers}\n          changeState={this.updateTheMarkers}\n        />\n        <Menu />\n        <div id=\"map\" role=\"application\" aria-label=\"Map\" tabIndex=\"-1\"></div>\n      </main>\n    );\n  }\n}\n\nfunction loadScript(url) {\n  const index = window.document.getElementsByTagName('script')[0];\n  const script = window.document.createElement('script');\n  script.defer = true;\n  script.async = true;\n  script.src = url;\n  script.onerror = window.gm_authFailure;\n  index.parentNode.insertBefore(script, index);//parent.parentNode.insertBefore(child, parent);\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}